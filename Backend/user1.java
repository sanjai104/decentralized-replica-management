

import java.io.*;
import java.nio.file.*;
import java.net.*;
import java.sql.*;
import javax.swing.*;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sivac
 */
public class user1 extends javax.swing.JFrame {
  String serverPath = "D:\\server";
        String serverAddress = "D:\\server";
        String saveDir = "D:\\downloads";
    /**
     * Creates new form user1
     */
    public user1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("user1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 0, -1, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 940, 200));

        jButton1.setText("server files");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 310, 110, 30));

        jButton2.setText("download");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 90, 30));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, 400, 30));

        jLabel2.setBackground(new java.awt.Color(255, 255, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\sivac\\OneDrive\\Desktop\\bg.jpg")); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 940, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         String[] files = listFilesInServer(serverPath);
        for (String file : files) {
            jTextArea1.append("\n"+file);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         String selectedFile = jTextField1.getText(); 
    
        
    String username = "user1";  // Or retrieve dynamically based on the logged-in user
    String serverPath = "D:\\server";
    String downloadDir = "D:\\downloads";
    handleFileDownload(selectedFile, username, serverPath, downloadDir);
    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    
    
    public  void handleFileDownload(String fileName, String username, String serverPath, String downloadDir) {
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String dbUrl = "jdbc:mysql://localhost:3306/db";
        String dbUser = "root";
        String dbPassword = "system";
        
        try {
            // Connect to MySQL Database
            conn = DriverManager.getConnection(dbUrl, dbUser, dbPassword);
            
            // Check previous downloads of the same file by the same user
            String query = "SELECT download_time FROM downloads WHERE filename = ? AND username = ? ORDER BY download_time DESC LIMIT 5";
            stmt = conn.prepareStatement(query);
            stmt.setString(1, fileName);
            stmt.setString(2, username);
            rs = stmt.executeQuery();

            long timeDifference = 0;
            int downloadCount = 0;

            while (rs.next()) {
                Timestamp downloadTime = rs.getTimestamp("download_time");
                long currentTime = System.currentTimeMillis();
                long downloadTimeMillis = downloadTime.getTime();
                timeDifference = currentTime - downloadTimeMillis;

                // Count the number of downloads within the last 60 seconds
                if (timeDifference <= 60000) {
                    downloadCount++;
                }
            }

            // If the file is downloaded twice within 30 seconds, create "edgeserver1" folder and download there
            if (timeDifference <= 30000 && downloadCount >= 2) {
                String edgeServerPath = "D:\\edgeserver1\\" + fileName;
                File newDir = new File("D:\\edgeserver1");
                if (!newDir.exists()) {
                    newDir.mkdir();
                }

                // Ensure the file is copied to the edgeserver1 folder
                if (copyFileToFolder(fileName, serverPath, edgeServerPath)) {
                    JOptionPane.showMessageDialog(null, "File downloaded to edgeserver1 due to rapid downloads.");
                } else {
                    JOptionPane.showMessageDialog(null, "Error copying file to edgeserver1.");
                }
            }
            // If the file is downloaded more than 4 times within 60 seconds, create "edgeserver2" folder and download there
            else if (downloadCount >= 4) {
                String edgeServerPath = "D:\\edgeserver2\\" + fileName;
                File newDir = new File("D:\\edgeserver2");
                if (!newDir.exists()) {
                    newDir.mkdir();
                }

                // Ensure the file is copied to the edgeserver2 folder
                if (copyFileToFolder(fileName, serverPath, edgeServerPath)) {
                    JOptionPane.showMessageDialog(null, "File downloaded to edgeserver2 due to multiple downloads.");
                } else {
                    JOptionPane.showMessageDialog(null, "Error copying file to edgeserver2.");
                }
            } else {
                // Normal download (download to the standard location)
                String targetPath = downloadDir + "\\" + fileName;
                if (copyFileToFolder(fileName, serverPath, targetPath)) {
                    JOptionPane.showMessageDialog(null, "File downloaded successfully to: " + targetPath);
                } else {
                    JOptionPane.showMessageDialog(null, "Error downloading file.");
                }
            }

            // Insert the download record into the database
            String insertQuery = "INSERT INTO downloads (filename, username) VALUES (?, ?)";
            stmt = conn.prepareStatement(insertQuery);
            stmt.setString(1, fileName);
            stmt.setString(2, username);
            stmt.executeUpdate();

        } catch (Exception  e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Database closing error: " + e.getMessage());
            }
        }
    }

    // Helper method to copy the file to the given folder path
    public static boolean copyFileToFolder(String fileName, String serverPath, String targetPath) {
        Path sourcePath = Paths.get(serverPath, fileName);
        Path targetFilePath = Paths.get(targetPath);

        try {
            // Check if source file exists
            if (Files.exists(sourcePath)) {
                // Copy the file to the target location
                Files.copy(sourcePath, targetFilePath, StandardCopyOption.REPLACE_EXISTING);
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "File does not exist: " + sourcePath);
                return false;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error copying file: " + e.getMessage());
            return false;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
     public static String[] listFilesInServer(String serverPath) {
        File folder = new File(serverPath);
        if (folder.exists() && folder.isDirectory()) {
            File[] files = folder.listFiles();
            if (files != null) {
                String[] fileNames = new String[files.length];
                for (int i = 0; i < files.length; i++) {
                    fileNames[i] = files[i].getName();
                }
                return fileNames;
            }
        }
        return new String[] {"No files available"};
    }
     
     
     
     
     
     
     
     
     
     
     
     
     
//     public  void downloadFile(String fileName, String serverPath, String downloadDir) {
//        Path sourcePath = Paths.get(serverPath, fileName);
//        Path targetPath = Paths.get(downloadDir, fileName);
//
//        try {
//            // Copy the file from server to downloads folder
//            Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);
//            JOptionPane.showMessageDialog(null, "File downloaded successfully to: " + targetPath);
//        } catch (IOException e) {
//            JOptionPane.showMessageDialog(null, "Error downloading file: " + e.getMessage());
//        }
//    }
     
     
     
//      public static void downloadFile(String serverAddress, String saveDir, String fileName) {
//        try {
//            URL url = new URL(serverAddress + "/" + fileName);
//            URLConnection connection = url.openConnection();
//            InputStream inputStream = connection.getInputStream();
//            
//            File saveDirectory = new File(saveDir);
//            if (!saveDirectory.exists()) {
//                saveDirectory.mkdirs();
//            }
//            
//            File outputFile = new File(saveDir + File.separator + fileName);
//            FileOutputStream outputStream = new FileOutputStream(outputFile);
//            
//            byte[] buffer = new byte[1024];
//            int bytesRead;
//            while ((bytesRead = inputStream.read(buffer)) != -1) {
//                outputStream.write(buffer, 0, bytesRead);
//            }
//            
//            outputStream.close();
//            inputStream.close();
//            
//            JOptionPane.showMessageDialog(null, "File downloaded successfully to: " + outputFile.getAbsolutePath());
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Error downloading file: " + e.getMessage());
//        }
//    }
//    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(user1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new user1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
